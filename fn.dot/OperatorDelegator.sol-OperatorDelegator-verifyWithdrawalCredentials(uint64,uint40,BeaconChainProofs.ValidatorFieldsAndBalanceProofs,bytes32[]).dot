digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->4;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
eigenPod.verifyWithdrawalCredentialsAndBalance(oracleBlockNumber,validatorIndex,proofs,validatorFields)

IRs:
HIGH_LEVEL_CALL, dest:eigenPod(IEigenPod), function:verifyWithdrawalCredentialsAndBalance, arguments:['oracleBlockNumber', 'validatorIndex', 'proofs', 'validatorFields']  "];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
validatorCurrentBalanceGwei = BeaconChainProofs.getBalanceFromBalanceRoot(validatorIndex,proofs.balanceRoot)

IRs:
REF_80(bytes32) -> proofs.balanceRoot
TMP_291(uint64) = LIBRARY_CALL, dest:BeaconChainProofs, function:BeaconChainProofs.getBalanceFromBalanceRoot(uint40,bytes32), arguments:['validatorIndex', 'REF_80'] 
validatorCurrentBalanceGwei(uint64) := TMP_291(uint64)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
stakedButNotVerifiedEth -= (validatorCurrentBalanceGwei * GWEI_TO_WEI)

IRs:
TMP_292(uint64) = validatorCurrentBalanceGwei (c)* GWEI_TO_WEI
stakedButNotVerifiedEth(uint256) = stakedButNotVerifiedEth (c)- TMP_292"];
4[label="Node Type: EXPRESSION 4

EXPRESSION:
onlyNativeEthRestakeAdmin()

IRs:
MODIFIER_CALL, OperatorDelegator.onlyNativeEthRestakeAdmin()()"];
4->1;
}
