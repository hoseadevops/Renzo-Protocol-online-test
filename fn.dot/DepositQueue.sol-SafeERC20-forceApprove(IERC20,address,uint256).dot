digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
approvalCall = abi.encodeWithSelector(token.approve.selector,spender,value)

IRs:
REF_29(bytes4) (->None) := 157198259(uint256)
TMP_115(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_29,spender,value)
approvalCall(bytes) := TMP_115(bytes)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! _callOptionalReturnBool(token,approvalCall)

IRs:
TMP_116(bool) = INTERNAL_CALL, SafeERC20._callOptionalReturnBool(IERC20,bytes)(token,approvalCall)
TMP_117 = ! TMP_116 
CONDITION TMP_117"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,0))

IRs:
REF_32(bytes4) (->None) := 157198259(uint256)
TMP_118(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_32,spender,0)
INTERNAL_CALL, SafeERC20._callOptionalReturn(IERC20,bytes)(token,TMP_118)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_callOptionalReturn(token,approvalCall)

IRs:
INTERNAL_CALL, SafeERC20._callOptionalReturn(IERC20,bytes)(token,approvalCall)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
