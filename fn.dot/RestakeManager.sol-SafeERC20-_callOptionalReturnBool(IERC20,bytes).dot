digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(success,returndata) = address(token).call(data)

IRs:
TMP_183 = CONVERT token to address
TUPLE_5(bool,bytes) = LOW_LEVEL_CALL, dest:TMP_183, function:call, arguments:['data']  
success(bool)= UNPACK TUPLE_5 index: 0 
returndata(bytes)= UNPACK TUPLE_5 index: 1 "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
success && (returndata.length == 0 || abi.decode(returndata,(bool))) && Address.isContract(address(token))

IRs:
REF_74 -> LENGTH returndata
TMP_184(bool) = REF_74 == 0
TMP_185(bool) = SOLIDITY_CALL abi.decode()(returndata,bool)
TMP_186(bool) = TMP_184 || TMP_185
TMP_187(bool) = success && TMP_186
TMP_188 = CONVERT token to address
TMP_189(bool) = LIBRARY_CALL, dest:Address, function:Address.isContract(address), arguments:['TMP_188'] 
TMP_190(bool) = TMP_187 && TMP_189
RETURN TMP_190"];
}
