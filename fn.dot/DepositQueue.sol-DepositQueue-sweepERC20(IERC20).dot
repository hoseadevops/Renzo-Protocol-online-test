digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->14;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
balance = IERC20(token).balanceOf(address(this))

IRs:
TMP_233 = CONVERT token to IERC20
TMP_234 = CONVERT this to address
TMP_235(uint256) = HIGH_LEVEL_CALL, dest:TMP_233(IERC20), function:balanceOf, arguments:['TMP_234']  
balance(uint256) := TMP_235(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
balance > 0

IRs:
TMP_236(bool) = balance > 0
CONDITION TMP_236"];
2->3[label="True"];
2->13[label="False"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
feeAmount = 0

IRs:
feeAmount(uint256) := 0(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
feeAddress != address(0x0) && feeBasisPoints > 0

IRs:
TMP_237 = CONVERT 0 to address
TMP_238(bool) = feeAddress != TMP_237
TMP_239(bool) = feeBasisPoints > 0
TMP_240(bool) = TMP_238 && TMP_239
CONDITION TMP_240"];
4->5[label="True"];
4->8[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
feeAmount = balance * feeBasisPoints / 10000

IRs:
TMP_241(uint256) = balance (c)* feeBasisPoints
TMP_242(uint256) = TMP_241 (c)/ 10000
feeAmount(uint256) := TMP_242(uint256)"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
IERC20(token).safeTransfer(feeAddress,feeAmount)

IRs:
TMP_243 = CONVERT token to IERC20
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransfer(IERC20,address,uint256), arguments:['TMP_243', 'feeAddress', 'feeAmount'] "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
ProtocolFeesPaid(token,feeAmount,feeAddress)

IRs:
Emit ProtocolFeesPaid(token,feeAmount,feeAddress)"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
token.approve(address(restakeManager),balance - feeAmount)

IRs:
TMP_246 = CONVERT restakeManager to address
TMP_247(uint256) = balance (c)- feeAmount
TMP_248(bool) = HIGH_LEVEL_CALL, dest:token(IERC20), function:approve, arguments:['TMP_246', 'TMP_247']  "];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
restakeManager.depositTokenRewardsFromProtocol(token,balance - feeAmount)

IRs:
TMP_249(uint256) = balance (c)- feeAmount
HIGH_LEVEL_CALL, dest:restakeManager(IRestakeManager), function:depositTokenRewardsFromProtocol, arguments:['token', 'TMP_249']  "];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalEarned[address(token)] = totalEarned[address(token)] + balance - feeAmount

IRs:
TMP_251 = CONVERT token to address
REF_58(uint256) -> totalEarned[TMP_251]
TMP_252 = CONVERT token to address
REF_59(uint256) -> totalEarned[TMP_252]
TMP_253(uint256) = REF_59 (c)+ balance
TMP_254(uint256) = TMP_253 (c)- feeAmount
REF_58(uint256) (->totalEarned) := TMP_254(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
RewardsDeposited(IERC20(address(token)),balance - feeAmount)

IRs:
TMP_255 = CONVERT token to address
TMP_256 = CONVERT TMP_255 to IERC20
TMP_257(uint256) = balance (c)- feeAmount
Emit RewardsDeposited(TMP_256,TMP_257)"];
12->13;
13[label="Node Type: END_IF 13
"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
onlyERC20RewardsAdmin()

IRs:
MODIFIER_CALL, DepositQueue.onlyERC20RewardsAdmin()()"];
14->1;
}
