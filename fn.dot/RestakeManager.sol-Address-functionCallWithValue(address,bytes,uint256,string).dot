digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(address(this).balance >= value,Address: insufficient balance for call)

IRs:
TMP_201 = CONVERT this to address
TMP_202(uint256) = SOLIDITY_CALL balance(address)(TMP_201)
TMP_203(bool) = TMP_202 >= value
TMP_204(None) = SOLIDITY_CALL require(bool,string)(TMP_203,Address: insufficient balance for call)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
(success,returndata) = target.call{value: value}(data)

IRs:
TUPLE_7(bool,bytes) = LOW_LEVEL_CALL, dest:target, function:call, arguments:['data'] value:value 
success(bool)= UNPACK TUPLE_7 index: 0 
returndata(bytes)= UNPACK TUPLE_7 index: 1 "];
4->5;
5[label="Node Type: RETURN 5

EXPRESSION:
verifyCallResultFromTarget(target,success,returndata,errorMessage)

IRs:
TMP_205(bytes) = INTERNAL_CALL, Address.verifyCallResultFromTarget(address,bool,bytes,string)(target,success,returndata,errorMessage)
RETURN TMP_205"];
}
