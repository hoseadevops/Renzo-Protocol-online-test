digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(success,returndata) = address(token).call(data)

IRs:
TMP_133 = CONVERT token to address
TUPLE_4(bool,bytes) = LOW_LEVEL_CALL, dest:TMP_133, function:call, arguments:['data']  
success(bool)= UNPACK TUPLE_4 index: 0 
returndata(bytes)= UNPACK TUPLE_4 index: 1 "];
3->4;
4[label="Node Type: RETURN 4

EXPRESSION:
success && (returndata.length == 0 || abi.decode(returndata,(bool))) && Address.isContract(address(token))

IRs:
REF_40 -> LENGTH returndata
TMP_134(bool) = REF_40 == 0
TMP_135(bool) = SOLIDITY_CALL abi.decode()(returndata,bool)
TMP_136(bool) = TMP_134 || TMP_135
TMP_137(bool) = success && TMP_136
TMP_138 = CONVERT token to address
TMP_139(bool) = LIBRARY_CALL, dest:Address, function:Address.isContract(address), arguments:['TMP_138'] 
TMP_140(bool) = TMP_137 && TMP_139
RETURN TMP_140"];
}
