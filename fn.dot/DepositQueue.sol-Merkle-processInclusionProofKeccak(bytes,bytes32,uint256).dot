digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(proof.length != 0 && proof.length % 32 == 0,Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32)

IRs:
REF_105 -> LENGTH proof
TMP_399(bool) = REF_105 != 0
REF_106 -> LENGTH proof
TMP_400(uint256) = REF_106 % 32
TMP_401(bool) = TMP_400 == 0
TMP_402(bool) = TMP_399 && TMP_401
TMP_403(None) = SOLIDITY_CALL require(bool,string)(TMP_402,Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
computedHash = leaf

IRs:
computedHash(bytes32) := leaf(bytes32)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->20;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 32

IRs:
i(uint256) := 32(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i <= proof.length

IRs:
REF_107 -> LENGTH proof
TMP_404(bool) = i <= REF_107
CONDITION TMP_404"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
index % 2 == 0

IRs:
TMP_405(uint256) = index % 2
TMP_406(bool) = TMP_405 == 0
CONDITION TMP_406"];
7->8[label="True"];
7->13[label="False"];
8[label="Node Type: INLINE ASM 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
mstore(uint256,uint256)(0x00,computedHash)

IRs:
TMP_407(None) = SOLIDITY_CALL mstore(uint256,uint256)(0,computedHash)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
mstore(uint256,uint256)(0x20,mload(uint256)(proof + i))

IRs:
TMP_408(bytes) = proof + i
TMP_409(uint256) = SOLIDITY_CALL mload(uint256)(TMP_408)
TMP_410(None) = SOLIDITY_CALL mstore(uint256,uint256)(32,TMP_409)"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
computedHash = keccak256(uint256,uint256)(0x00,0x40)

IRs:
TMP_411(uint256) = SOLIDITY_CALL keccak256(uint256,uint256)(0,64)
computedHash(bytes32) := TMP_411(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
index = index / 2

IRs:
TMP_412(uint256) = index / 2
index(uint256) := TMP_412(uint256)"];
12->18;
13[label="Node Type: INLINE ASM 13
"];
13->14;
14[label="Node Type: EXPRESSION 14

EXPRESSION:
mstore(uint256,uint256)(0x00,mload(uint256)(proof + i))

IRs:
TMP_413(bytes) = proof + i
TMP_414(uint256) = SOLIDITY_CALL mload(uint256)(TMP_413)
TMP_415(None) = SOLIDITY_CALL mstore(uint256,uint256)(0,TMP_414)"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
mstore(uint256,uint256)(0x20,computedHash)

IRs:
TMP_416(None) = SOLIDITY_CALL mstore(uint256,uint256)(32,computedHash)"];
15->16;
16[label="Node Type: EXPRESSION 16

EXPRESSION:
computedHash = keccak256(uint256,uint256)(0x00,0x40)

IRs:
TMP_417(uint256) = SOLIDITY_CALL keccak256(uint256,uint256)(0,64)
computedHash(bytes32) := TMP_417(uint256)"];
16->17;
17[label="Node Type: EXPRESSION 17

EXPRESSION:
index = index / 2

IRs:
TMP_418(uint256) = index / 2
index(uint256) := TMP_418(uint256)"];
17->18;
18[label="Node Type: END_IF 18
"];
18->19;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
i += 32

IRs:
i(uint256) = i (c)+ 32"];
19->6;
20[label="Node Type: RETURN 20

EXPRESSION:
computedHash

IRs:
RETURN computedHash"];
}
