digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->13;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
feeAmount = 0

IRs:
feeAmount(uint256) := 0(uint256)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
feeAddress != address(0x0) && feeBasisPoints > 0

IRs:
TMP_208 = CONVERT 0 to address
TMP_209(bool) = feeAddress != TMP_208
TMP_210(bool) = feeBasisPoints > 0
TMP_211(bool) = TMP_209 && TMP_210
CONDITION TMP_211"];
2->3[label="True"];
2->10[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
feeAmount = msg.value * feeBasisPoints / 10000

IRs:
TMP_212(uint256) = msg.value (c)* feeBasisPoints
TMP_213(uint256) = TMP_212 (c)/ 10000
feeAmount(uint256) := TMP_213(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
(success) = feeAddress.call{value: feeAmount}()

IRs:
TUPLE_9(bool,bytes) = LOW_LEVEL_CALL, dest:feeAddress, function:call, arguments:[''] value:feeAmount 
success(bool)= UNPACK TUPLE_9 index: 0 "];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
! success

IRs:
TMP_214 = ! success 
CONDITION TMP_214"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
revert TransferFailed()()

IRs:
TMP_215(None) = SOLIDITY_CALL revert TransferFailed()()"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
ProtocolFeesPaid(IERC20(address(0x0)),feeAmount,feeAddress)

IRs:
TMP_216 = CONVERT 0 to address
TMP_217 = CONVERT TMP_216 to IERC20
Emit ProtocolFeesPaid(TMP_217,feeAmount,feeAddress)"];
9->10;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
totalEarned[address(0x0)] = totalEarned[address(0x0)] + msg.value - feeAmount

IRs:
TMP_219 = CONVERT 0 to address
REF_51(uint256) -> totalEarned[TMP_219]
TMP_220 = CONVERT 0 to address
REF_52(uint256) -> totalEarned[TMP_220]
TMP_221(uint256) = REF_52 (c)+ msg.value
TMP_222(uint256) = TMP_221 (c)- feeAmount
REF_51(uint256) (->totalEarned) := TMP_222(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
RewardsDeposited(IERC20(address(0x0)),msg.value - feeAmount)

IRs:
TMP_223 = CONVERT 0 to address
TMP_224 = CONVERT TMP_223 to IERC20
TMP_225(uint256) = msg.value (c)- feeAmount
Emit RewardsDeposited(TMP_224,TMP_225)"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
nonReentrant()

IRs:
MODIFIER_CALL, ReentrancyGuardUpgradeable.nonReentrant()()"];
13->1;
}
