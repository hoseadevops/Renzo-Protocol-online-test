digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)((value == 0) || (token.allowance(address(this),spender) == 0),SafeERC20: approve from non-zero to non-zero allowance)

IRs:
TMP_95(bool) = value == 0
TMP_96 = CONVERT this to address
TMP_97(uint256) = HIGH_LEVEL_CALL, dest:token(IERC20), function:allowance, arguments:['TMP_96', 'spender']  
TMP_98(bool) = TMP_97 == 0
TMP_99(bool) = TMP_95 || TMP_98
TMP_100(None) = SOLIDITY_CALL require(bool,string)(TMP_99,SafeERC20: approve from non-zero to non-zero allowance)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
_callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,value))

IRs:
REF_18(bytes4) (->None) := 157198259(uint256)
TMP_101(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_18,spender,value)
INTERNAL_CALL, SafeERC20._callOptionalReturn(IERC20,bytes)(token,TMP_101)"];
}
