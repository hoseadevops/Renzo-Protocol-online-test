digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
returndata = address(token).functionCall(data,SafeERC20: low-level call failed)

IRs:
TMP_127 = CONVERT token to address
TMP_128(bytes) = LIBRARY_CALL, dest:Address, function:Address.functionCall(address,bytes,string), arguments:['TMP_127', 'data', 'SafeERC20: low-level call failed'] 
returndata(bytes) := TMP_128(bytes)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(returndata.length == 0 || abi.decode(returndata,(bool)),SafeERC20: ERC20 operation did not succeed)

IRs:
REF_37 -> LENGTH returndata
TMP_129(bool) = REF_37 == 0
TMP_130(bool) = SOLIDITY_CALL abi.decode()(returndata,bool)
TMP_131(bool) = TMP_129 || TMP_130
TMP_132(None) = SOLIDITY_CALL require(bool,string)(TMP_131,SafeERC20: ERC20 operation did not succeed)"];
}
