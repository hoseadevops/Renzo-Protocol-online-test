digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
oldAllowance = token.allowance(address(this),spender)

IRs:
TMP_79 = CONVERT this to address
TMP_80(uint256) = HIGH_LEVEL_CALL, dest:token(IERC20Upgradeable), function:allowance, arguments:['TMP_79', 'spender']  
oldAllowance(uint256) := TMP_80(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(oldAllowance >= value,SafeERC20: decreased allowance below zero)

IRs:
TMP_81(bool) = oldAllowance >= value
TMP_82(None) = SOLIDITY_CALL require(bool,string)(TMP_81,SafeERC20: decreased allowance below zero)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,oldAllowance - value))

IRs:
REF_19(bytes4) (->None) := 157198259(uint256)
TMP_83(uint256) = oldAllowance - value
TMP_84(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_19,spender,TMP_83)
INTERNAL_CALL, SafeERC20Upgradeable._callOptionalReturn(IERC20Upgradeable,bytes)(token,TMP_84)"];
}
