digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->8;
1[label="Node Type: NEW VARIABLE 1
"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(operatorDelegatorTVLs,totalTVL) = calculateTVLs()

IRs:
TUPLE_12(uint256[][],uint256[],uint256) = INTERNAL_CALL, RestakeManager.calculateTVLs()()
operatorDelegatorTVLs(uint256[])= UNPACK TUPLE_12 index: 1 
totalTVL(uint256)= UNPACK TUPLE_12 index: 2 "];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
operatorDelegator = chooseOperatorDelegatorForDeposit(operatorDelegatorTVLs,totalTVL)

IRs:
TMP_572(IOperatorDelegator) = INTERNAL_CALL, RestakeManager.chooseOperatorDelegatorForDeposit(uint256[],uint256)(operatorDelegatorTVLs,totalTVL)
operatorDelegator(IOperatorDelegator) := TMP_572(IOperatorDelegator)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_token.safeTransferFrom(msg.sender,address(this),_amount)

IRs:
TMP_573 = CONVERT this to address
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeTransferFrom(IERC20,address,address,uint256), arguments:['_token', 'msg.sender', 'TMP_573', '_amount'] "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
_token.safeApprove(address(operatorDelegator),_amount)

IRs:
TMP_575 = CONVERT operatorDelegator to address
LIBRARY_CALL, dest:SafeERC20, function:SafeERC20.safeApprove(IERC20,address,uint256), arguments:['_token', 'TMP_575', '_amount'] "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
operatorDelegator.deposit(_token,_amount)

IRs:
TMP_577(uint256) = HIGH_LEVEL_CALL, dest:operatorDelegator(IOperatorDelegator), function:deposit, arguments:['_token', '_amount']  "];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
onlyDepositQueue()

IRs:
MODIFIER_CALL, RestakeManager.onlyDepositQueue()()"];
8->1;
}
