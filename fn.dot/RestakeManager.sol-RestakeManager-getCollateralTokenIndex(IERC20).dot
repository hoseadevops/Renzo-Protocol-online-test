digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
tokenLength = collateralTokens.length

IRs:
REF_220 -> LENGTH collateralTokens
tokenLength(uint256) := REF_220(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < tokenLength

IRs:
TMP_523(bool) = i < tokenLength
CONDITION TMP_523"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
collateralTokens[i] == _collateralToken

IRs:
REF_221(IERC20) -> collateralTokens[i]
TMP_524(bool) = REF_221 == _collateralToken
CONDITION TMP_524"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
i

IRs:
RETURN i"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
9->5;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
revert NotFound()()

IRs:
TMP_525(None) = SOLIDITY_CALL revert NotFound()()"];
}
