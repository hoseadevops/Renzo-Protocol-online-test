digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
isTopLevelCall = ! _initializing

IRs:
TMP_10 = ! _initializing 
isTopLevelCall(bool) := TMP_10(bool)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)((isTopLevelCall && _initialized < 1) || (! AddressUpgradeable.isContract(address(this)) && _initialized == 1),Initializable: contract is already initialized)

IRs:
TMP_11(bool) = _initialized < 1
TMP_12(bool) = isTopLevelCall && TMP_11
TMP_13 = CONVERT this to address
TMP_14(bool) = LIBRARY_CALL, dest:AddressUpgradeable, function:AddressUpgradeable.isContract(address), arguments:['TMP_13'] 
TMP_15 = ! TMP_14 
TMP_16(bool) = _initialized == 1
TMP_17(bool) = TMP_15 && TMP_16
TMP_18(bool) = TMP_12 || TMP_17
TMP_19(None) = SOLIDITY_CALL require(bool,string)(TMP_18,Initializable: contract is already initialized)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_initialized = 1

IRs:
_initialized(uint8) := 1(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
isTopLevelCall

IRs:
CONDITION isTopLevelCall"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
_initializing = true

IRs:
_initializing(bool) := True(bool)"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: _ 7
"];
7->8;
8[label="Node Type: IF 8

EXPRESSION:
isTopLevelCall

IRs:
CONDITION isTopLevelCall"];
8->9[label="True"];
8->11[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
_initializing = false

IRs:
_initializing(bool) := False(bool)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
Initialized(1)

IRs:
Emit Initialized(1)"];
10->11;
11[label="Node Type: END_IF 11
"];
}
