digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->16;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
found = false

IRs:
found(bool) := False(bool)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
odLength = operatorDelegators.length

IRs:
REF_238 -> LENGTH operatorDelegators
odLength(uint256) := REF_238(uint256)"];
2->5;
3[label="Node Type: BEGIN_LOOP 3
"];
3->6;
4[label="Node Type: END_LOOP 4
"];
4->12;
5[label="Node Type: NEW VARIABLE 5

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
5->3;
6[label="Node Type: IF_LOOP 6

EXPRESSION:
i < odLength

IRs:
TMP_566(bool) = i < odLength
CONDITION TMP_566"];
6->7[label="True"];
6->4[label="False"];
7[label="Node Type: IF 7

EXPRESSION:
operatorDelegators[i] == operatorDelegator

IRs:
REF_239(IOperatorDelegator) -> operatorDelegators[i]
TMP_567(bool) = REF_239 == operatorDelegator
CONDITION TMP_567"];
7->8[label="True"];
7->10[label="False"];
8[label="Node Type: EXPRESSION 8

EXPRESSION:
found = true

IRs:
found(bool) := True(bool)"];
8->9;
9[label="Node Type: BREAK 9
"];
9->4;
10[label="Node Type: END_IF 10
"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
++ i

IRs:
i(uint256) = i + 1"];
11->6;
12[label="Node Type: IF 12

EXPRESSION:
! found

IRs:
TMP_568 = ! found 
CONDITION TMP_568"];
12->13[label="True"];
12->14[label="False"];
13[label="Node Type: EXPRESSION 13

EXPRESSION:
revert NotFound()()

IRs:
TMP_569(None) = SOLIDITY_CALL revert NotFound()()"];
13->14;
14[label="Node Type: END_IF 14
"];
14->15;
15[label="Node Type: EXPRESSION 15

EXPRESSION:
operatorDelegator.stakeEth{value: msg.value}(pubkey,signature,depositDataRoot)

IRs:
HIGH_LEVEL_CALL, dest:operatorDelegator(IOperatorDelegator), function:stakeEth, arguments:['pubkey', 'signature', 'depositDataRoot'] value:msg.value "];
16[label="Node Type: EXPRESSION 16

EXPRESSION:
onlyDepositQueue()

IRs:
MODIFIER_CALL, RestakeManager.onlyDepositQueue()()"];
16->1;
}
