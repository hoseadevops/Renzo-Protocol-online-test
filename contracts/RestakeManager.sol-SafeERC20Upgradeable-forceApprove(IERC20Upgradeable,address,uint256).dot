digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
approvalCall = abi.encodeWithSelector(token.approve.selector,spender,value)

IRs:
REF_22(bytes4) (->None) := 157198259(uint256)
TMP_86(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_22,spender,value)
approvalCall(bytes) := TMP_86(bytes)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
! _callOptionalReturnBool(token,approvalCall)

IRs:
TMP_87(bool) = INTERNAL_CALL, SafeERC20Upgradeable._callOptionalReturnBool(IERC20Upgradeable,bytes)(token,approvalCall)
TMP_88 = ! TMP_87 
CONDITION TMP_88"];
2->3[label="True"];
2->5[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
_callOptionalReturn(token,abi.encodeWithSelector(token.approve.selector,spender,0))

IRs:
REF_25(bytes4) (->None) := 157198259(uint256)
TMP_89(bytes) = SOLIDITY_CALL abi.encodeWithSelector()(REF_25,spender,0)
INTERNAL_CALL, SafeERC20Upgradeable._callOptionalReturn(IERC20Upgradeable,bytes)(token,TMP_89)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
_callOptionalReturn(token,approvalCall)

IRs:
INTERNAL_CALL, SafeERC20Upgradeable._callOptionalReturn(IERC20Upgradeable,bytes)(token,approvalCall)"];
4->5;
5[label="Node Type: END_IF 5
"];
}
